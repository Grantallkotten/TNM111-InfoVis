<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Scatter Plot Visualization</title>
  </head>
  <body>
    <canvas id="scatterPlotCanvas" width="800" height="600"></canvas>

    <script>
      // Function to parse CSV data
      function parseCSV(csvData) {
        const rows = csvData.split("\n");
        const data = [];
        for (const row of rows) {
          const values = row.split(",");
          data.push({
            x: parseFloat(values[0]),
            y: parseFloat(values[1]),
            category: values[2],
          });
        }
        return data;
      }

      // Function to draw scatter plot
      function drawScatterPlot(data) {
        const canvas = document.getElementById("scatterPlotCanvas");
        const ctx = canvas.getContext("2d");

        // Set value ranges based on data
        const xValues = data.map((point) => point.x);
        const yValues = data.map((point) => point.y);
        const minX = Math.min(...xValues);
        const maxX = Math.max(...xValues);
        const minY = Math.min(...yValues);
        const maxY = Math.max(...yValues);

        // Map data points to canvas coordinates
        const mapX = (x) => ((x - minX) / (maxX - minX)) * canvas.width;
        const mapY = (y) =>
          canvas.height - ((y - minY) / (maxY - minY)) * canvas.height;

        // Draw x-axis ticks and values
        for (let i = 0; i <= 10; i++) {
          const tickX = i * (canvas.width / 10);
          const tickValueX = minX + (i / 10) * (maxX - minX);

          ctx.beginPath();
          ctx.moveTo(tickX, canvas.height - 5);
          ctx.lineTo(tickX, canvas.height + 5);
          ctx.stroke();

          ctx.font = "10px Arial";
          ctx.fillStyle = "black";
          ctx.fillText(tickValueX.toFixed(1), tickX - 15, canvas.height + 15);
        }

        // Draw y-axis ticks and values
        for (let i = 0; i <= 10; i++) {
          const tickY = i * (canvas.height / 10);
          const tickValueY = minY + (i / 10) * (maxY - minY);

          ctx.beginPath();
          ctx.moveTo(canvas.width - 5, tickY);
          ctx.lineTo(canvas.width + 5, tickY);
          ctx.stroke();

          ctx.font = "10px Arial";
          ctx.fillStyle = "black";
          ctx.fillText(tickValueY.toFixed(1), canvas.width + 10, tickY + 5);
        }

        // Draw x-axis
        ctx.beginPath();
        ctx.moveTo(0, mapY(0));
        ctx.lineTo(canvas.width, mapY(0));
        ctx.stroke();

        // Draw y-axis
        ctx.beginPath();
        ctx.moveTo(mapX(0), 0);
        ctx.lineTo(mapX(0), canvas.height);
        ctx.stroke();

        // Draw data points with color and labels
        for (const point of data) {
          const x = mapX(point.x);
          const y = mapY(point.y);
          ctx.beginPath();
          ctx.arc(x, y, 8, 0, 2 * Math.PI);
          ctx.fillStyle = getCategoryColor(point.category);
          ctx.fill();

          // Draw label
          ctx.font = "12px Arial";
          ctx.fillStyle = "black";
          ctx.fillText(point.category, x - 4, y + 4);
        }
      }

      // Function to get color based on category
      function getCategoryColor(category) {
        switch (category) {
          case "a":
            return "red";
          case "b":
            return "green";
          case "c":
            return "blue";
          default:
            return "black";
        }
      }

      // Load and draw data1.csv
      const dataCSV = `-12,20,a\n-23,23,a\n50,-12,b\n1,54,c\n2,2,c\n19,-7,b\n-52,19,a\n-1,30,a\n-13,21,a\n30,-22,b\n11,34,c\n-9,17,a\n11,-41,b\n32,-4,b\n-1,21,a\n55,-55,b\n15,-25,b\n32,12,c\n9,7,c\n50,51,c\n-23,13,a\n-34,29,a`;
      const data = parseCSV(dataCSV);
      drawScatterPlot(data);
    </script>
  </body>
</html>
