<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Scatter Plot Visualization</title>
    <style>
      canvas {
        border: 1px solid #000;
      }
    </style>
  </head>
  <body>
    <canvas id="scatterPlotCanvas" width="600" height="400"></canvas>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Function to read the CSV file
        function readCSV(file, callback) {
          let xhr = new XMLHttpRequest();
          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
              callback(xhr.responseText);
            }
          };
          xhr.open("GET", file, true);
          xhr.send();
        }

        // Function to parse CSV data
        function parseCSV(csvData) {
          let rows = csvData.split("\n");
          let data = [];
          let dataPoint;

          for (let i = 0; i < rows.length; i++) {
            let columns = rows[i].split(",");
            if (columns.length === 3) {
              data.push({
                x: parseFloat(columns[0]),
                y: parseFloat(columns[1]),
                className: columns[2].trim(),
              });
            }
          }

          return data;
        }

        // Function to create the scatter plot
        function createScatterPlot(data) {
          const scatterPlot = document.getElementById("scatter-plot");

          // Calculate value ranges
          const xValues = data.map((point) => point.x);
          const yValues = data.map((point) => point.y);
          const xRange = {
            min: Math.min(...xValues),
            max: Math.max(...xValues),
          };
          const yRange = {
            min: Math.min(...yValues),
            max: Math.max(...yValues),
          };

          // Draw x-axis
          const xAxis = document.createElement("div");
          xAxis.className = "axis axis-x";
          xAxis.style.bottom = "0";
          scatterPlot.appendChild(xAxis);

          // Draw y-axis
          const yAxis = document.createElement("div");
          yAxis.className = "axis axis-y";
          yAxis.style.left = "0";
          scatterPlot.appendChild(yAxis);

          // Draw ticks and tick values for x-axis
          for (let xTick = xRange.min; xTick <= xRange.max; xTick++) {
            const tick = document.createElement("div");
            tick.className = "tick";
            tick.style.bottom = "0";
            tick.style.left =
              ((xTick - xRange.min) / (xRange.max - xRange.min)) * 100 + "%";
            xAxis.appendChild(tick);

            const tickValue = document.createElement("div");
            tickValue.innerText = xTick;
            tickValue.style.bottom = "-15px";
            tickValue.style.left =
              ((xTick - xRange.min) / (xRange.max - xRange.min)) * 100 + "%";
            xAxis.appendChild(tickValue);
          }

          // Draw ticks and tick values for y-axis
          for (let yTick = yRange.min; yTick <= yRange.max; yTick++) {
            const tick = document.createElement("div");
            tick.className = "tick";
            tick.style.left = "0";
            tick.style.bottom =
              ((yTick - yRange.min) / (yRange.max - yRange.min)) * 100 + "%";
            yAxis.appendChild(tick);

            const tickValue = document.createElement("div");
            tickValue.innerText = yTick;
            tickValue.style.left = "-30px";
            tickValue.style.bottom =
              ((yTick - yRange.min) / (yRange.max - yRange.min)) * 100 + "%";
            yAxis.appendChild(tickValue);
          }

          // Draw data points with different shapes based on the className
          for (const point of data) {
            const dataPoint = document.createElement("div");
            dataPoint.className = "data-point";
            dataPoint.style.left =
              ((point.x - xRange.min) / (xRange.max - xRange.min)) * 100 + "%";
            dataPoint.style.bottom =
              ((point.y - yRange.min) / (yRange.max - yRange.min)) * 100 + "%";
            dataPoint.style.background = getColor(point.className);
            scatterPlot.appendChild(dataPoint);
          }

          // Display legend
          const legend = document.createElement("div");
          legend.className = "legend";
          for (const className of Array.from(
            new Set(data.map((point) => point.className))
          )) {
            const legendItem = document.createElement("div");
            legendItem.className = "legend-item";

            const legendColor = document.createElement("div");
            legendColor.className = "legend-color";
            legendColor.style.background = getColor(className);
            legendItem.appendChild(legendColor);

            const legendText = document.createElement("span");
            legendText.innerText = className;
            legendItem.appendChild(legendText);

            legend.appendChild(legendItem);
          }
          scatterPlot.appendChild(legend);
        }

        // Function to get color based on className
        function getColor(className) {
          switch (className) {
            case "A":
              return "red";
            case "B":
              return "green";
            case "C":
              return "blue";
            default:
              return "black";
          }
        }

        readCSV("data1.csv", function (csvContent) {
          // Parse the CSV data
          let csvData = parseCSV(csvContent);
          createScatterPlot(csvData);
        });
      });
    </script>
  </body>
</html>
